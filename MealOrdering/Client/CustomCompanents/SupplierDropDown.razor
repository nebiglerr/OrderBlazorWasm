
@if (supplierList == null)
{
<p>
    <em>
        @loadingMessage
    </em>
</p> }
            else
            {
<BlazoredTypeahead SearchMethod="@searchSupplier"
                   TValue="SuppliersDto"
                   TItem="SuppliersDto"
                   Value="selectedSupplier"
                   ValueChanged="SelectedSupplierChanged"
                   ValueExpression="@(() => selectedSupplier)"
                   placeholder="Search by supplier name"
                   ShowDropDownOnFocus="true"
                   EnableDropDown="true"
                   Debounce="500">
    <SelectedTemplate>
        @context.Name
    </SelectedTemplate>
    <ResultTemplate>
        @context.Name (@context.IsActive.ToString())
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any search results.
    </NotFoundTemplate>
</BlazoredTypeahead>}





@code {
    [Parameter]
    public Guid Value { get; set; }

    [Parameter]
    public EventCallback<Guid> ValueChanged { get; set; }

    [Inject]
    HttpClient Client { get; set; }

    List<SuppliersDto> supplierList;
    SuppliersDto selectedSupplier = new SuppliersDto();

    String loadingMessage = "Loading...";

    protected async override Task OnInitializedAsync()
    {
        try
        {
            supplierList = await Client.GetServiceResponseAsync<List<SuppliersDto>>("api/Supplier/Suppliers");

            if (!Value.IsNull())
                selectedSupplier = supplierList.FirstOrDefault(i => i.Id == Value);

        }
        catch (ApiException)
        {
            loadingMessage = "Loading Error";
        }
    }

    private Task SelectedSupplierChanged(SuppliersDto Supplier)
    {
        if (Supplier == null)
        {
            return ValueChanged.InvokeAsync(Guid.Empty);
        }

        selectedSupplier = Supplier;
        Value = Supplier.Id;

        return ValueChanged.InvokeAsync(Supplier.Id);
    }


    async Task<IEnumerable<SuppliersDto>> searchSupplier(String searchText)
    {
        return await Task.FromResult(supplierList.Where(i => i.Name.ToUpper().Contains(searchText.ToUpper())).ToList());
    }
    }
